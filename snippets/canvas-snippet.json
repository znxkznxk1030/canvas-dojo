{
  "Canvas Default": {
    "prefix": "canvas:default",
    "body": [
      "/*!",
      " * Created by Canvas Dojo <https://github.com/znxkznxk1030/canvas-dojo>",
      " *",
      " * canvas-boilerplate by <https://github.com/christopher4lis/canvas-boilerplate>",
      " * Learn more https://chriscourses.com/",
      " */",
      "",
      "const canvas = document.querySelector(\"canvas\");",
      "const c = canvas.getContext(\"2d\");",
      "",
      "canvas.width = innerWidth;",
      "canvas.height = innerHeight;",
      "",
      "const mouse = {",
      "  x: innerWidth / 2,",
      "  y: innerHeight / 2,",
      "};",
      "",
      "const colors = [\"#2185C5\", \"#7ECEFD\", \"#FFF6E5\", \"#FF7F66\"];",
      "",
      "// Event Listeners",
      "addEventListener(\"mousemove\", (event) => {",
      "  mouse.x = event.clientX;",
      "  mouse.y = event.clientY;",
      "});",
      "",
      "addEventListener(\"resize\", () => {",
      "  canvas.width = innerWidth;",
      "  canvas.height = innerHeight;",
      "",
      "  init();",
      "});",
      "",
      "// Objects",
      "class Object {",
      "  constructor(x, y, radius, color) {",
      "    this.x = x;",
      "    this.y = y;",
      "    this.radius = radius;",
      "    this.color = color;",
      "  }",
      "",
      "  draw() {",
      "    c.beginPath();",
      "    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);",
      "    c.fillStyle = this.color;",
      "    c.fill();",
      "    c.closePath();",
      "  }",
      "",
      "  update() {",
      "    this.draw();",
      "  }",
      "}",
      "",
      "// Implementation",
      "let objects;",
      "function init() {",
      "  objects = [];",
      "",
      "  for (let i = 0; i < 400; i++) {",
      "    // objects.push()",
      "  }",
      "}",
      "",
      "// Animation Loop",
      "function animate() {",
      "  requestAnimationFrame(animate);",
      "  c.clearRect(0, 0, canvas.width, canvas.height);",
      "",
      "  c.fillText(\"HTML CANVAS BOILERPLATE\", mouse.x, mouse.y);",
      "  // objects.forEach(object => {",
      "  //  object.update()",
      "  // })",
      "}",
      "",
      "init();",
      "animate();",
      "",
      "/**",
      " *  utils.js - <https://github.com/christopher4lis/canvas-boilerplate/blob/master/src/js/utils.js>",
      " *  @function randomIntFromRange Picks a random integer within a range",
      " *  @function randomColor Picks a random color",
      " *  @function distance Find the distance between two points",
      " **/ ",
      "",
      "function randomIntFromRange(min, max) {",
      "  return Math.floor(Math.random() * (max - min + 1) + min);",
      "}",
      "",
      "function randomColor(colors) {",
      "  return colors[Math.floor(Math.random() * colors.length)];",
      "}",
      "",
      "function distance(x1, y1, x2, y2) {",
      "  const xDist = x2 - x1;",
      "  const yDist = y2 - y1;",
      "",
      "  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));",
      "}",
      ""
    ],
    "description": "Canvas boilerplate ( default )"
  },
  "Canvas Gravity": {
    "prefix": "canvas:gravity",
    "body": [
      "/*!",
      " * Canvas | Gravity",
      " *",
      " * Created by Canvas Dojo <https://github.com/znxkznxk1030/canvas-dojo>",
      " *",
      " * canvas-boilerplate by <https://github.com/christopher4lis/canvas-boilerplate>",
      " * Learn more https://chriscourses.com/",
      " */",
      "",
      "const canvas = document.querySelector(\"canvas\");",
      "const c = canvas.getContext(\"2d\");",
      "",
      "canvas.width = innerWidth;",
      "canvas.height = innerHeight;",
      "",
      "const mouse = {",
      "  x: innerWidth / 2,",
      "  y: innerHeight / 2,",
      "};",
      "",
      "const colors = [\"#2185C5\", \"#7ECEFD\", \"#FFF6E5\", \"#FF7F66\"];",
      "",
      "let gravity = 1;",
      "let friction = 0.94;",
      "",
      "// Event Listeners",
      "addEventListener(\"mousemove\", (event) => {",
      "  mouse.x = event.clientX;",
      "  mouse.y = event.clientY;",
      "});",
      "",
      "addEventListener(\"resize\", () => {",
      "  canvas.width = innerWidth;",
      "  canvas.height = innerHeight;",
      "",
      "  init();",
      "});",
      "",
      "addEventListener(\"click\", () => {",
      "  init();",
      "});",
      "",
      "// Objects",
      "class Ball {",
      "  constructor(x, y, dx, dy, radius, color) {",
      "    this.x = x;",
      "    this.y = y;",
      "    this.dx = dx;",
      "    this.dy = dy;",
      "    this.radius = radius;",
      "    this.color = color;",
      "  }",
      "",
      "  draw() {",
      "    c.beginPath();",
      "    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);",
      "    c.fillStyle = this.color;",
      "    c.fill();",
      "    c.stroke();",
      "    c.closePath();",
      "  }",
      "",
      "  update() {",
      "    if (",
      "      this.x + this.radius + this.dx > canvas.width ||",
      "      this.x - this.radius < 0",
      "    ) {",
      "      this.dx = -this.dx;",
      "    }",
      "    this.x += this.dx;",
      "",
      "    if (this.y + this.radius + this.dy > canvas.height) {",
      "      this.dy = -this.dy * friction;",
      "    } else {",
      "      this.dy += gravity;",
      "    }",
      "    this.y += this.dy;",
      "",
      "    this.draw();",
      "  }",
      "}",
      "",
      "let ballArray = [];",
      "let arrayLength = 50;",
      "",
      "// Implementation",
      "function init() {",
      "  ballArray = [];",
      "  for (let i = 0; i < arrayLength; i++) {",
      "    let radius = randomIntFromRange(8, 30);",
      "    let x = randomIntFromRange(radius, canvas.width - radius);",
      "    let y = randomIntFromRange(0, canvas.height - radius);",
      "    let dx = randomIntFromRange(-2, 2);",
      "    let color = randomColor(colors);",
      "    ballArray.push(new Ball(x, y, dx, 2, radius, color));",
      "  }",
      "}",
      "",
      "// Animation Loop",
      "function animate() {",
      "  requestAnimationFrame(animate);",
      "  c.clearRect(0, 0, canvas.width, canvas.height);",
      "",
      "  ballArray.forEach((ball) => {",
      "    ball.update();",
      "  });",
      "}",
      "",
      "init();",
      "animate();",
      "",
      "/**",
      " *  utils.js - <https://github.com/christopher4lis/canvas-boilerplate/blob/master/src/js/utils.js>",
      " *  @function randomIntFromRange Picks a random integer within a range",
      " *  @function randomColor Picks a random color",
      " *  @function dispatch Find the distance between two points",
      " **/",
      "",
      "function randomIntFromRange(min, max) {",
      "  return Math.floor(Math.random() * (max - min + 1) + min);",
      "}",
      "",
      "function randomColor(colors) {",
      "  return colors[Math.floor(Math.random() * colors.length)];",
      "}",
      "",
      "function distance(x1, y1, x2, y2) {",
      "  const xDist = x2 - x1;",
      "  const yDist = y2 - y1;",
      "",
      "  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));",
      "}",
      ""
    ],
    "description": "Canvas boilerplate ( collision detection )"
  },
  "Canvas Collision Detection": {
    "prefix": "canvas:collision detection",
    "body": [
      "/*!",
      " * Created by Canvas Dojo <https://github.com/znxkznxk1030/canvas-dojo>",
      " *",
      " * canvas-boilerplate by <https://github.com/christopher4lis/canvas-boilerplate>",
      " * Learn more https://chriscourses.com/",
      " */",
      "",
      "const canvas = document.querySelector(\"canvas\");",
      "const c = canvas.getContext(\"2d\");",
      "",
      "canvas.width = innerWidth;",
      "canvas.height = innerHeight;",
      "",
      "const mouse = {",
      "  x: innerWidth / 2,",
      "  y: innerHeight / 2,",
      "};",
      "",
      "const colors = [\"#2185C5\", \"#7ECEFD\", \"#FFF6E5\", \"#FF7F66\"];",
      "",
      "// Event Listeners",
      "addEventListener(\"mousemove\", (event) => {",
      "  mouse.x = event.clientX;",
      "  mouse.y = event.clientY;",
      "});",
      "",
      "addEventListener(\"resize\", () => {",
      "  canvas.width = innerWidth;",
      "  canvas.height = innerHeight;",
      "",
      "  init();",
      "});",
      "",
      "// Particle",
      "class Particle {",
      "  constructor(x, y, radius, color) {",
      "    this.x = x;",
      "    this.y = y;",
      "    this.velocity = {",
      "      x: (Math.random() - 0.5) * 0.1,",
      "      y: (Math.random() - 0.5) * 0.1,",
      "    };",
      "    this.radius = radius;",
      "    this.color = color;",
      "    this.mass = 0.5;",
      "    this.opacity = 0;",
      "  }",
      "",
      "  draw() {",
      "    c.beginPath();",
      "    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);",
      "    c.save();",
      "    c.globalAlpha = this.opacity;",
      "    c.fillStyle = this.color;",
      "    c.fill();",
      "    c.restore();",
      "    c.strokeStyle = this.color;",
      "    c.stroke();",
      "    c.closePath();",
      "  }",
      "",
      "  update(particles) {",
      "    this.draw();",
      "",
      "    particles.forEach((particle) => {",
      "      if (this === particle) return;",
      "",
      "      if (distance(this.x, this.y, particle.x, particle.y) < this.radius * 2) {",
      "        resolveCollision(this, particle);",
      "      }",
      "",
      "      if (this.x - this.radius <= 0 || this.x + this.radius >= innerWidth) {",
      "        this.velocity.x *= -1;",
      "      }",
      "",
      "      if (this.y - this.radius <= 0 || this.y + this.radius >= innerHeight) {",
      "        this.velocity.y *= -1;",
      "      }",
      "",
      "      // mouse collision detection",
      "      if (",
      "        distance(mouse.x, mouse.y, this.x, this.y) < 60 &&",
      "        this.opacity < 0.2",
      "      ) {",
      "        this.opacity += 0.02;",
      "      } else if (this.opacity > 0) {",
      "        this.opacity -= 0.02;",
      "      }",
      "",
      "      this.x += this.velocity.x;",
      "      this.y += this.velocity.y;",
      "    });",
      "  }",
      "}",
      "",
      "// Implementation",
      "let particles;",
      "function init() {",
      "  particles = [];",
      "",
      "  for (let i = 0; i < 150; i++) {",
      "    const radius = 15;",
      "    let x = randomIntFromRange(radius, innerWidth - radius);",
      "    let y = randomIntFromRange(radius, innerHeight - radius);",
      "    const color = randomColor(colors);",
      "",
      "    if (i !== 0) {",
      "      for (let j = 0; j < particles.length; j++) {",
      "        const particle = particles[j];",
      "",
      "        if (distance(x, y, particle.x, particle.y) < radius * 2) {",
      "          x = randomIntFromRange(radius, innerWidth - radius);",
      "          y = randomIntFromRange(radius, innerHeight - radius);",
      "",
      "          j = -1;",
      "        }",
      "      }",
      "    }",
      "    particles.push(new Particle(x, y, radius, color));",
      "  }",
      "}",
      "",
      "// Animation Loop",
      "function animate() {",
      "  requestAnimationFrame(animate);",
      "  c.clearRect(0, 0, canvas.width, canvas.height);",
      "",
      "  particles.forEach((particle) => {",
      "    particle.update(particles);",
      "  });",
      "}",
      "",
      "init();",
      "animate();",
      "",
      "/**",
      " *  utils.js - <https://github.com/christopher4lis/canvas-boilerplate/blob/master/src/js/utils.js>",
      " *  @function randomIntFromRange Picks a random integer within a range",
      " *  @function randomColor Picks a random color",
      " *  @function dispatch Find the distance between two points",
      " **/",
      "",
      "function randomIntFromRange(min, max) {",
      "  return Math.floor(Math.random() * (max - min + 1) + min);",
      "}",
      "",
      "function randomColor(colors) {",
      "  return colors[Math.floor(Math.random() * colors.length)];",
      "}",
      "",
      "function distance(x1, y1, x2, y2) {",
      "  const xDist = x2 - x1;",
      "  const yDist = y2 - y1;",
      "",
      "  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));",
      "}",
      "",
      "/**",
      " * Rotates coordinate system for velocities",
      " *",
      " * Takes velocities and alters them as if the coordinate system they're on was rotated",
      " *",
      " * @param  Object | velocity | The velocity of an individual particle",
      " * @param  Float  | angle    | The angle of collision between two objects in radians",
      " * @return Object | The altered x and y velocities after the coordinate system has been rotated",
      " */",
      "",
      "function rotate(velocity, angle) {",
      "  const rotatedVelocities = {",
      "    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),",
      "    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle),",
      "  };",
      "",
      "  return rotatedVelocities;",
      "}",
      "",
      "/**",
      " * Swaps out two colliding particles's x and y velocities after running through",
      " * an elastic collision reaction equation",
      " *",
      " * @param  Object | particle      | A particle object with x and y coordinates, plus velocity",
      " * @param  Object | otherParticle | A particle object with x and y coordinates, plus velocity",
      " * @return Null   | Dose not return a value",
      " */",
      "",
      "function resolveCollision(particle, otherParticle) {",
      "  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;",
      "  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;",
      "",
      "  const xDist = otherParticle.x - particle.x;",
      "  const yDist = otherParticle.y - particle.y;",
      "",
      "  // Prevent accidental overlap of particles",
      "  if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {",
      "    // Grab angle between the two colliding particles",
      "    const angle = -Math.atan2(",
      "      otherParticle.y - particle.y,",
      "      otherParticle.x - particle.x",
      "    );",
      "",
      "    // Store mass in var for better readability in collision equation",
      "    const m1 = particle.mass;",
      "    const m2 = otherParticle.mass;",
      "",
      "    // Velocity before equation",
      "    const u1 = rotate(particle.velocity, angle);",
      "    const u2 = rotate(otherParticle.velocity, angle);",
      "",
      "    // Velocity after 1d collision equation",
      "    const v1 = {",
      "      x: (u1.x * (m1 - m2)) / (m1 + m2) + (u2.x * 2 * m2) / (m1 + m2),",
      "      y: u1.y,",
      "    };",
      "    const v2 = {",
      "      x: (u2.x * (m1 - m2)) / (m1 + m2) + (u1.x * 2 * m2) / (m1 + m2),",
      "      y: u2.y,",
      "    };",
      "",
      "    // Final velocity after rotating axis back to original location",
      "    const vFinal1 = rotate(v1, -angle);",
      "    const vFinal2 = rotate(v2, -angle);",
      "",
      "    // Swap particle velocites for realistic bounce effect",
      "    particle.velocity.x = vFinal1.x;",
      "    particle.velocity.y = vFinal2.y;",
      "",
      "    otherParticle.velocity.x = vFinal2.x;",
      "    otherParticle.velocity.y = vFinal2.y;",
      "  }",
      "}",
      ""
    ],
    "description": "Canvas boilerplate ( collision detection )"
  }
}
